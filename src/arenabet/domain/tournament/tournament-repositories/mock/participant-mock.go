// Code generated by MockGen. DO NOT EDIT.
// Source: domain/tournament/tournament-repositories/participant-repository.go

// Package mock_tournament_repositories is a generated GoMock package.
package mock_tournament_repositories

import (
	reflect "reflect"

	tournament_entities "github.com/JozPedro23zx/arena-bet-hub/domain/tournament/tournament-entities"
	gomock "github.com/golang/mock/gomock"
)

// MockParticipantRepository is a mock of ParticipantRepository interface.
type MockParticipantRepository struct {
	ctrl     *gomock.Controller
	recorder *MockParticipantRepositoryMockRecorder
}

// MockParticipantRepositoryMockRecorder is the mock recorder for MockParticipantRepository.
type MockParticipantRepositoryMockRecorder struct {
	mock *MockParticipantRepository
}

// NewMockParticipantRepository creates a new mock instance.
func NewMockParticipantRepository(ctrl *gomock.Controller) *MockParticipantRepository {
	mock := &MockParticipantRepository{ctrl: ctrl}
	mock.recorder = &MockParticipantRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParticipantRepository) EXPECT() *MockParticipantRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockParticipantRepository) Find(id string) (*tournament_entities.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*tournament_entities.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockParticipantRepositoryMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockParticipantRepository)(nil).Find), id)
}

// Insert mocks base method.
func (m *MockParticipantRepository) Insert(participant tournament_entities.Participant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", participant)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockParticipantRepositoryMockRecorder) Insert(participant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockParticipantRepository)(nil).Insert), participant)
}

// Update mocks base method.
func (m *MockParticipantRepository) Update(participant tournament_entities.Participant) (*tournament_entities.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", participant)
	ret0, _ := ret[0].(*tournament_entities.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockParticipantRepositoryMockRecorder) Update(participant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockParticipantRepository)(nil).Update), participant)
}
